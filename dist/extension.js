/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.deactivate = exports.activate = void 0;\r\nconst vscode = __webpack_require__(1);\r\nconst cp = __webpack_require__(2);\r\nlet lastCodeBlock = \"\";\r\nlet startCode = 0;\r\nlet lastResult = '';\r\nlet swap = '';\r\nlet swapExp = '';\r\nlet suppressOutput = false;\r\nlet tempd = '';\r\nlet temp = '';\r\nlet cd = '';\r\nlet ex = '';\r\nlet exec = '';\r\nlet arr;\r\nlet config = vscode.workspace.getConfiguration('hover-exec');\r\nconst { activeTextEditor } = vscode.window;\r\nfunction activate(context) {\r\n    context.subscriptions.push(vscode.workspace.onDidChangeConfiguration(e => {\r\n        config = vscode.workspace.getConfiguration('hover-exec'); //update config\r\n    }));\r\n    const uriHandler = new MyUriHandler();\r\n    context.subscriptions.push(vscode.window.registerUriHandler(uriHandler));\r\n    vscode.languages.registerHoverProvider('markdown', new (class {\r\n        provideHover(doc, pos, token) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                const line = doc.lineAt(pos);\r\n                let currentFolder = doc.uri.path.substring(1, doc.uri.path.lastIndexOf('/') + 1); //%c\r\n                vscode.workspace.fs.createDirectory(context.globalStorageUri);\r\n                let selectOnHover = config.get('selectOnHover');\r\n                cd = '';\r\n                startCode = pos.line;\r\n                if (line.text.startsWith('```')) {\r\n                    tempd = context.globalStorageUri.fsPath + '/';\r\n                    suppressOutput = line.text.endsWith('>');\r\n                    swap = '';\r\n                    swapExp = '';\r\n                    ex = getcmd(line.text); //command id\r\n                    arr = config.get(ex);\r\n                    let msg = getmsg(line.text); //message for hover\r\n                    if (arr && arr.length >= 3) {\r\n                        temp = 'temp.txt';\r\n                        if (arr.length >= 4) {\r\n                            temp = arr[3];\r\n                        }\r\n                        exec = arr[0].replace('%f', '\"' + tempd + temp + '\"').replace('%p', '\"' + tempd + '\"').replace('%c', '\"' + currentFolder + '\"').replace('%n', '\"' + temp + '\"');\r\n                        cd = arr[1].replace('%c', '\"' + currentFolder + '\"').replace('%p', '\"' + tempd + '\"');\r\n                        if (cd !== '') {\r\n                            cd += '\\n';\r\n                        }\r\n                        swap = arr[2].substr(0, 3); // {{ is the start, the end is }}\r\n                        swapExp = arr[2].substr(3);\r\n                        lastCodeBlock = getCodeBlockAt(doc, pos);\r\n                        if (selectOnHover) {\r\n                            selectOutputCodeblock();\r\n                        }\r\n                        let url = 'vscode://rmzetti.hover-exec?' + ex;\r\n                        if (swap === '') {\r\n                            suppressOutput = true;\r\n                        }\r\n                        else {\r\n                            msg += '  ... *use ' + swap + ' for inline results*';\r\n                        }\r\n                        msg = '[exec ' + ex + ' ' + msg + '](' + url + ')';\r\n                        msg = '*[ \\[last script\\] ](/' + tempd + temp + ')* ' +\r\n                            '*[ \\[last result\\] ](/' + tempd + temp + '.out.txt)*\\n\\n' + msg;\r\n                        const contents = new vscode.MarkdownString('*hover exec:* ' + msg);\r\n                        contents.isTrusted = true;\r\n                        return new vscode.Hover(contents);\r\n                    }\r\n                    else if (ex === 'output') {\r\n                        ex = 'delete';\r\n                        if (selectOnHover) {\r\n                            selectOutputCodeblock();\r\n                        }\r\n                        return new vscode.Hover(new vscode.MarkdownString('*hover exec:*\\n\\n[delete output](vscode://rmzetti.hover-exec?delete)'));\r\n                    }\r\n                    else {\r\n                        ex = '';\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    let fileUri = vscode.Uri.file(line.text.trim()); //can have internal spaces\r\n                    if (fileUri) {\r\n                        try {\r\n                            yield vscode.workspace.fs.stat(fileUri);\r\n                            let temp1 = line.text.trim().replace(/\\s/g, '%20');\r\n                            const contents = //markdown link must use %20\r\n                             new vscode.MarkdownString('[openrm](/' + temp1 + ')');\r\n                            contents.isTrusted = true;\r\n                            return new vscode.Hover(contents);\r\n                        }\r\n                        catch (_a) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    })());\r\n}\r\nexports.activate = activate;\r\nclass MyUriHandler {\r\n    handleUri(uri) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (uri.query === 'delete') {\r\n                deleteOutput();\r\n                return;\r\n            }\r\n            if (!suppressOutput) {\r\n                selectOutputCodeblock();\r\n            }\r\n            if (lastCodeBlock.includes('=>>') || lastCodeBlock.includes('=<<')) {\r\n                lastCodeBlock = lastCodeBlock.replace(/=<</g, '=>>');\r\n                swap = '=>>';\r\n            }\r\n            let re = new RegExp(swap + '.*', 'mg');\r\n            let s = lastCodeBlock;\r\n            if (swap !== '') {\r\n                lastCodeBlock = lastCodeBlock.replace(re, swap); //remove previous in-line results\r\n                re = new RegExp('^(.*)' + swap, 'mg');\r\n                s = lastCodeBlock.replace(re, swapExp);\r\n            }\r\n            writeFile(tempd + temp, cd + s);\r\n            if (ex !== '') {\r\n                if (ex === 'eval') {\r\n                    let s1 = s.split(/\\r?\\n/);\r\n                    lastResult = '';\r\n                    s1.forEach((line) => {\r\n                        s = eval(line);\r\n                        if (s) {\r\n                            lastResult += s + '\\n';\r\n                        } //the if avoids 'undefined'\r\n                    });\r\n                }\r\n                else {\r\n                    lastResult = yield execShell(exec);\r\n                }\r\n                if (ex === 'buddvs') {\r\n                    lastResult = lastResult.replace(/�/g, 'î');\r\n                }\r\n            }\r\n            else {\r\n                lastResult = uri.toString();\r\n            }\r\n            writeFile(tempd + temp + '.out.txt', lastResult);\r\n            if (!suppressOutput) {\r\n                paste(lastResult);\r\n            }\r\n            removeSelection();\r\n        });\r\n    }\r\n}\r\nfunction paste(text) {\r\n    const { activeTextEditor } = vscode.window;\r\n    if (activeTextEditor && startCode > 0) {\r\n        if (ex === 'eval') {\r\n            text = text.replace(/\\[object Promise\\]/g, '');\r\n        }\r\n        let re = new RegExp(swap + '.*', 'mg');\r\n        lastCodeBlock = lastCodeBlock.replace(re, swap);\r\n        re = new RegExp('^.*{{.*}}$', 'm');\r\n        let re1 = new RegExp(swap + '$', 'm');\r\n        if (swap !== \"\" && re1.test(lastCodeBlock)) {\r\n            //vscode.window.showInformationMessage('pr>'+lastCodeBlock.includes(swap+'\\n'));\r\n            //vscode.window.showInformationMessage('re>'+re1.test(lastCodeBlock));\r\n            //while(lastCodeBlock.includes(swap+'\\n')){\r\n            while (re1.test(lastCodeBlock)) {\r\n                //copy intermediate results into the codeblock\r\n                let i = text.indexOf('{{') + 2;\r\n                let j = text.indexOf('}}\\r');\r\n                if (j < 0) {\r\n                    j = text.indexOf('}}\\n');\r\n                } //to allow \\n, \\r & \\r\\n\r\n                //vscode.window.showInformationMessage(''+i+'<>'+j+'<>'+text.substring(i,j)+'<');\r\n                if (i > 0 && j > i) {\r\n                    let s = text.substring(i, j).replace(/\\r?\\n/, ';'); //remove newlines in intermediate results\r\n                    if (s === '') {\r\n                        s = ';';\r\n                    }\r\n                    lastCodeBlock = lastCodeBlock.replace(swap + '\\n', swap + s + '\\n');\r\n                    text = text.replace(re, '');\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n            //vscode.window.showInformationMessage('no swap');\r\n        }\r\n        re = new RegExp('^.*{{.*}}$', 'mg');\r\n        text = text.replace(re, '');\r\n        text = text.replace(/^\\s*[\\r?\\n]/gm, ''); //remove blank lines\r\n        activeTextEditor.edit((selText) => {\r\n            if (text === '') {\r\n                selText.replace(activeTextEditor.selection, lastCodeBlock + \"```\\n\");\r\n            }\r\n            else {\r\n                text = text.trim() + '\\n';\r\n                selText.replace(activeTextEditor.selection, lastCodeBlock + \"```\\n```output\\n\" + text + \"```\\n\");\r\n            }\r\n        });\r\n        activeTextEditor.selection = new vscode.Selection(startCode, 0, startCode, 0);\r\n    }\r\n}\r\nfunction createTest(s) {\r\n    return new Function;\r\n}\r\nfunction getcmd(s) {\r\n    let len = s.indexOf(\" \");\r\n    if (len < 0) {\r\n        len = s.length;\r\n    }\r\n    ex = \"\";\r\n    if (s.includes('cmd=')) {\r\n        ex = s.substr(s.indexOf('cmd=') + 4).replace(/[\"']/g, '').trim();\r\n        let ipos = ex.indexOf('}');\r\n        if (ipos <= 0) {\r\n            ex = \"\";\r\n        }\r\n        else {\r\n            if (ex.indexOf(\" \") > 0 && ex.indexOf(\" \") < ipos) {\r\n                ipos = ex.indexOf(\" \");\r\n            }\r\n            if (ex.indexOf(\",\") > 0 && ex.indexOf(\",\") < ipos) {\r\n                ipos = ex.indexOf(\",\");\r\n            }\r\n            ex = ex.substring(0, ipos).trim();\r\n        }\r\n    }\r\n    if (ex === '') {\r\n        ex = s.replace(/.*\\{(.*)\\}.*/, '$1');\r\n        ex = s.substring(3, len);\r\n    }\r\n    //vscode.window.showInformationMessage(ex);\r\n    return ex;\r\n}\r\nfunction getmsg(s) {\r\n    //message for hover\r\n    let msg = '';\r\n    let ipos = s.indexOf('--');\r\n    if (ipos <= 0) {\r\n        ipos = s.indexOf('<!--') - 2;\r\n    }\r\n    if (ipos <= 0) {\r\n        ipos = s.indexOf('//');\r\n    }\r\n    if (ipos > 0) {\r\n        msg = s.substr(ipos + 2);\r\n    }\r\n    return msg;\r\n}\r\nfunction removeSelection() {\r\n    if (activeTextEditor) {\r\n        activeTextEditor.selection = new vscode.Selection(startCode, 0, startCode, 0);\r\n    }\r\n}\r\nconst execShell = (cmd) => new Promise((resolve, reject) => {\r\n    cp.exec(cmd, (err, out) => {\r\n        if (err) {\r\n            return resolve(cmd + ' error!'); //reject(err);\r\n        }\r\n        return resolve(out);\r\n    });\r\n});\r\nfunction writeFile(file, text, options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        yield vscode.workspace.fs.writeFile(vscode.Uri.file(file), Buffer.from(text, 'utf8'));\r\n        // return new Promise <void> ((resolve, reject) => {\r\n        // \tfs.writeFile(file, text, options, (error) => {\r\n        // \tif (error) {\r\n        // \t\treturn reject(error.toString());\r\n        // \t} else {\r\n        // \t\treturn resolve();\r\n        // \t}\r\n        // \t});\r\n        // });\r\n    });\r\n}\r\nfunction getCodeBlockAt(doc, pos) {\r\n    const { activeTextEditor } = vscode.window;\r\n    let s = '', n = doc.lineAt(pos).lineNumber + 1;\r\n    startCode = n;\r\n    if (activeTextEditor) {\r\n        while (n < doc.lineCount) {\r\n            let a = doc.lineAt(new vscode.Position(n, 0)).text;\r\n            n++;\r\n            if (a.startsWith('```')) {\r\n                break;\r\n            }\r\n            else {\r\n                s = s + a + '\\n';\r\n            }\r\n        }\r\n    }\r\n    return s;\r\n}\r\nfunction selectOutputCodeblock() {\r\n    const { activeTextEditor } = vscode.window;\r\n    //let s='';\r\n    if (activeTextEditor) {\r\n        const doc = activeTextEditor.document;\r\n        let a = doc.lineAt(new vscode.Position(startCode, 0)).text;\r\n        let n = startCode; //+1;\r\n        while (n < doc.lineCount) {\r\n            n++;\r\n            let a = doc.lineAt(new vscode.Position(n, 0)).text;\r\n            if (a.startsWith('```')) {\r\n                //\tif(a==='```'){\r\n                n++;\r\n                if (n < doc.lineCount && doc.lineAt(new vscode.Position(n, 0)).text === '```output') {\r\n                    //continue past start of output section\r\n                }\r\n                else {\r\n                    activeTextEditor.selection = new vscode.Selection(startCode, 0, n, 0);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return;\r\n}\r\nfunction deleteOutput() {\r\n    const { activeTextEditor } = vscode.window;\r\n    if (activeTextEditor) {\r\n        selectOutputCodeblock();\r\n        activeTextEditor.edit((selText) => {\r\n            selText.replace(activeTextEditor.selection, '');\r\n        });\r\n    }\r\n}\r\nfunction deactivate() { }\r\nexports.deactivate = deactivate;\r\n\n\n//# sourceURL=webpack://hover-exec/./src/extension.ts?");

/***/ }),
/* 1 */
/***/ ((module) => {

module.exports = require("vscode");;

/***/ }),
/* 2 */
/***/ ((module) => {

module.exports = require("child_process");;

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(0);
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;